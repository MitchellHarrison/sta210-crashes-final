---
title: "Insert title here"
subtitle: "Insert subtitle here"
execute: 
  warning: false
  execute: false
---

# Introduction

## Dataset

```{r}
view(crashes)

class(crashes$contributing_factor_vehicle_1)

levels(crashes$contributing_factor_vehicle_1)

levels(crashes$contributing_factor_vehicle_2)

crashes %>%
  filter(is.na(borough)) %>%
  count()

crashes %>%
  filter(is.na(borough)) %>%
  filter(!is.na(latitude)) %>%
  count()

crashes %>%
  filter(number_of_persons_killed != 0) %>%
  count()

crashes %>%
  filter(num_casualties > 1) %>%
  count()

crashes %>%
  filter(num_casualties > 2) %>%
  count()

crashes %>%
  filter(num_casualties > 3) %>%
  count()

crashes %>%
  filter(num_casualties > 4) %>%
  count()

crashes %>%
  filter(num_casualties > 5) %>%
  count()

crashes %>%
  filter(num_casualties > 6) %>%
  count()

crashes <- crashes %>%
  mutate(across(starts_with("contributing_factor_vehicle"),
                ~ case_when(
                  . %in% c("Alcohol Involvement", "Drugs (Illegal)",
                           "Prescription Medication") ~ "Impaired",
                  . %in% c("Driver Inattention/Distraction", "Fatigued/Drowsy",
                           "Lost Consciousness", "Other Electronic Device",
                           "Outside Car Distraction", "Passenger Distraction")
                  ~ "Distraction/Inattention/Fatigue",
                  . %in% c("Following Too Closely", "Passing Too Closely",
                           "Unsafe Lane Changing",
                           "Unsafe Speed",
                           "Backing Unsafely") ~ "Aggressive/Reckless Driving",
                  . %in% c("Failure to Yield Right-of-Way",
                           "Pedestrian/Bicyclist/Other Pedestrian Error/Confusion",
                           "Reaction to Other Uninvolved Vehicle",
                           "Reaction to Uninvolved Vehicle",
                           "Turning Improperly")
                  ~ "Failure to Obey Traffic Signs/Signals/Rules",
                  . %in% c("Lane Marking Improper/Inadequate",
                           "Obstruction/Debris", "Other Vehicular",
                           "Oversized Vehicle", "Pavement Defective",
                           "Pavement Slippery",
                           "Traffic Control Device Improper/Non-Working",
                           "Traffic Control Disregarded",
                           "View Obstructed/Limited")
                  ~ "Other Technical/Mechanical Factors",
                  TRUE ~ "Other/Unknown"
                )
  ))

view(crashes)

```

Our dataset is composed of harvested and compiled data from New York City Police Department (NYPD) open access data on all police reported motor vehicle collisions (MVC) in all five boroughs of New York City from July 1st, 2012 through April 24th, 2023. The police report from which individual MVC observations in our dataset hail (MV104-AN) is required to be filled out for MVC where someone is injured or killed, or which result in at least \$1,000 of total property damage. Notably, only one MV104-AN form is filled out for all involved in an accident, meaning each observation in our dataset represents a unique MVC.

The following are the variables of interest from our dataset:

`crash_date`: the date on which the MVC occured.

`crash_time`: the hour and minute (24-hr time) at which the MVC occured.

`number_of_persons_injured`: The number of people who were injured in an individual MVC (not including people who were killed in the MVC).

`number_of_persons_killed`: The number of people who were killed in an individual MVC.

`crash_date`

# Read Data/Libraries

```{r}
#| label: import-libs
library(tidyverse)
library(tidymodels)
library(lubridate)
```

```{r}
#| label: read-data
crashes <- read_csv("data/crashes_10k.csv")
```

# Methodology

- MCAR 
- 2 or fewer vehicles only
- response: person casualty (injured + killed)
- removed rows with >2 vehicles
- add column to track whether or not there are injuries/fatalities
5:12
12:5
5:9
9:5


# Data Wrangling

```{r}
#| label: clean-data
crashes <- crashes |>
  # remove accidents involving greater than 2 vehicles
  filter(is.na(contributing_factor_vehicle_3), is.na(vehicle_type_code_3)) |>
  
  select(!c(vehicle_type_code_3, vehicle_type_code_4, vehicle_type_code_5,
            contributing_factor_vehicle_3, contributing_factor_vehicle_4,
            contributing_factor_vehicle_5)) |>
  
  mutate(
    # add combined casualty column (injuries + fatalities)
    num_casualties = number_of_persons_killed + number_of_persons_injured,
    
    # create factors
    contributing_factor_vehicle_1 = as.factor(contributing_factor_vehicle_1),
    contributing_factor_vehicle_2 = as.factor(contributing_factor_vehicle_2),
    vehicle_type_code_1 = as.factor(vehicle_type_code_1),
    vehicle_type_code_2 = as.factor(vehicle_type_code_2),
    zip_code = as.factor(zip_code),
    borough = as.factor(borough),
    
    # add time of day categories
    time_day = case_when(
      hms(crash_time) > hm("5:00") & hms(crash_time) <= hm("12:00") ~
        "morning",
      hms(crash_time) > hm("12:00") & hms(crash_time) <= hm("17:00") ~
        "afternoon",
      hms(crash_time) > hm("17:00") & hms(crash_time) <= hm("21:00") ~
        "evening",
      hms(crash_time) > hm("21:00") | hms(crash_time) <= hm("5:00") ~
        "night"
    ),
    
    # add ordinal column for injuries v. fatalities
    has_injury = number_of_persons_injured > 0,
    has_fatality = number_of_persons_killed >0,
    has_casualty = has_injury | has_fatality,
    severity = case_when(
      has_fatality ~ "fatal",
      has_injury ~ "injury",
      T ~ "no casualties"
    ),
    severity = factor(severity, levels = c("no casualties", "injury", "fatal")),
    
    # add Julian date column
    crash_date = as.Date(crash_date, format = "%m/%d/%Y"),
    crash_day = weekdays(crash_date, abbreviate = F),
    yday = yday(crash_date)
  )
```

# Exploratory Analysis
## Time of Day
```{r}
#| label: viz-time-density
crashes |>
  filter(num_casualties > 0) |>
  mutate(color = if_else(crash_day == "Sunday" | crash_day == "Saturday", 
         "red", "gray")) |>
  ggplot(aes(x = crash_time, group = crash_day)) +
  geom_density(color = "lightgray") +
  geom_density(
    data = filter(crashes, num_casualties > 0, 
                  crash_day == "Sunday" | crash_day == "Saturday"), 
    color = "red"
  ) +
  geom_vline(xintercept = hm("9:00"), linetype = 3) +
  geom_vline(xintercept = hm("17:00"), linetype = 3) +
  annotate("text", label = "9:00 am", color = "gray", angle = 90,
           x = hm("10:00"), y = 5e-06, hjust = "right", vjust = "bottom") +
  annotate("text", label = "5:00 pm", color = "gray", angle = 90,
           x = hm("16:30"), y = 5e-06, hjust = "right", vjust = "bottom") +
  annotate("text", color = "red", label = "Weekend", x = hm("00:20"), 
           hjust = "left", fontface = "bold", y = 8e-06) +
  annotate("text", color = "gray", label = "Mon. - Fri.", x = hm("00:20"), 
           hjust = "left", fontface = "bold", y = 1e-06) +
  scale_color_identity() +
  theme_classic() +
  labs(
    x = "Time of crash",
    y = "Density",
    title = "Weekend casualties are disproportionately in the early morning",
    subtitle = paste("Time density of NYC car accidents with injuries or",
                     "fatalities by day of week"),
    color = "Weekday"
  )
```

## Day of the year
```{r}
#| label: density-severity-day-of-year
crashes |>
  ggplot(aes(x = yday)) +
  geom_density(data = filter(crashes, severity == "no casualties"), 
               aes(group = severity), color = "lightgray") +
  geom_density(data = filter(crashes, severity == "injury"), color = "red") +
  annotate("text", color = "red", label = "Casualties", x = 27, y = 0.0019,
           fontface = "bold", hjust = "left") +
  annotate("text", color = "lightgray", label = "No casualties", x = 5, 
           y = 0.0029, fontface = "bold", hjust = "left") +
  theme_classic() +
  labs(
    x = "Day of the year",
    y = "Density",
    title = "Colder months have lower vehicular casualties",
    subtitle = "NYC car accident density over all years by level of severity"
  )
```

## Borough
```{r}
#| label: viz-hist-by-street
crashes |>
  group_by(borough) |>
  summarise(count = n()) |>
  mutate(color = if_else(is.na(borough), "red", "lightgray")) |>
  ggplot(aes(x = borough, y = count, fill = color)) +
  geom_col() +
  scale_fill_identity() +
  theme_classic() +
  labs(
    x = NULL,
    y = "Count",
    title = "\"Missing\" is the biggest borough in NYC",
    subtitle = paste("Missingness of borough variable is too great to include",
                     "in the model")
  )
```


# Results
