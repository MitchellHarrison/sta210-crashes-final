---
title: "New York's Streetside Casualties"
subtitle: "An explanatory analysis of NYC car accidents"
author: "Drew LoPolito and Mitch Harrison"
format: pdf
execute: 
  warning: false
  execute: false
  echo: false
---

# Introduction

## Project Motivation

Citizens of large cities all over America suffer injury and death in motor vehicle crashes. In New York, motor vehicle accidents are among the top five [reasons for hospitalizations statewide](https://www.health.ny.gov/statistics/prevention/injury_prevention/all_injury.htm). We hope that motivated policymakers in NYC and other metropolitan areas could use our explanatory models to craft traffic policy, shift police resources, better target traffic citations, and turn our insights into potentially lifesaving urban development and planning.

## Dataset

Our dataset is composed of harvested and compiled data from New York City Police Department (NYPD) open access data on all police reported motor vehicle collisions (MVC) in all five boroughs of New York City from July 1st, 2012 through April 24th, 2023. The police report from which individual MVC observations in our dataset hail (MV104-AN) is required to be filled out for MVC where someone is injured or killed, or which result in at least \$1,000 of total property damage.

We created a number of new variables by manipulating the dataset, as well as re-categorizing/cleaning some of the existing variables for practical use in modeling (for example, the original variables for factors contributing to the accident for each motorist and vehicle type of each motorist contained roughly 100 categories).

The following are the variables of interest from our dataset, with new or re-categorized variables noted:

**`has_casualty`** (New): a binary variable corresponding to whether a MVC resulted in at least one casualty. This variable was generated from the original `number_of_persons_injured` and `number_of_persons_killed` variables. **This is our response variable of interest.**

**`weekend_weekday`** (New): a binary variable corresponding to whether a MVC occurred during the week or weekend. This variable was generated from the original `crash_date` variable.

**`yday`** (New): a numeric variable ranging from 1 to 365 corresponding to the numerical day of the year on which the MVC occurred. This variable was generated from the original `crash_date` variable.

**`time_day`** (New): a categorical variable with levels of "morning" (5 AM to 12 PM), "afternoon" (12 PM to 5 PM), "evening" (5 PM to 9 PM), and "night" (9 PM to 5 AM) corresponding to the time of day at which a MVC occurred. This variable was generated from the original 24-hr `crash_time` variable.

**`vtype1`** and **`vtype2`** (Recategorized): categorical variables corresponding to the type(s) of each vehicle involved in the crash, with categories of "Passenger vehicles," "Commercial vehicles," "Motorcycles," "Non-Motor Vehicle," "Other/Unknown," and "None" (only applies to `vtype2`).

**`factor1`** and **`factor2`** (Recategorized): categorical variables corresponding to any factor(s) which potentially contributed to the crash for respective vehicles, with categories of "Aggressive/Reckless Driving," "Failure to Obey Traffic Signs/Signals/Rules," "Impairment/Distraction/Fatigue," "Performance-unrelated Technical/Mechanical Factors," and "Other/Unknown."

***Our primary research concern is determining which characteristics of a MVC's timing and participants involved make casualties more likely.***

```{r}
#| label: import-libs
library(tidyverse)
library(tidymodels)
library(lubridate)
library(gt)
library(Stat2Data)
```

```{r}
#| label: read-data
crashes <- read_csv("data/crashes_10k.csv")
```

## Data Cleaning

Notably, only one MV104-AN form is filled out for all involved in an accident, meaning each observation in our dataset represents a unique MVC.

Our initial dataset contained approximately 1.9 million observations, found [here](https://www.kaggle.com/datasets/utkarshx27/motor-vehicle-collisions?resource=download). This was too large to push to git, so we sampled 10,000 observations from the dataset completely at random (**Appendix 1a**). The original dataset, as well as our randomly sampled dataset, contained data on crashes involving 1 to 5 motorists. However, 93% of crashes in the dataset occurred between 2 or fewer motorists (98% between 3 or fewer and 100% between 4 or fewer). Due to high levels of missingness in crashes with 3 or more motorists, as well as their low real-world frequency in New York City (where the kind of highway pile-ups which generate MVC with 3 or more motorists aren't generally observed), we decided to examine exclusively MVC between 2 or fewer motorists by removing all observations involving more than two vehicles, which brought our total number of observations down to approximately 9,300.

Next, we used the original counts of persons killed and persons injured to create a count of casualties, `num_casualties`, (defined as injuries **and** casualties). We then created binary variables for MVC injury, fatality, and casualty, the last of which, `has_casualty`, is our response variable of interest. We used these three variables to create a ordinal category of accident severity, with levels of "no casualties," "injury," and "fatal."

We also cleaned/manipulated the time data, which initially was composed of a date column and a 24-hr time column. We used this data to create a variable for MVC time of the day `time_day`, day of the week, `crash_day`, numerical day of the year (1-365), `yday`, and weekday or weekend timing, `weekend_weekday`.

```{r}
#| label: clean-data
crashes <- crashes |>
  # remove accidents involving greater than 2 vehicles
  filter(is.na(contributing_factor_vehicle_3), is.na(vehicle_type_code_3)) |>
  
  dplyr::select(!c(vehicle_type_code_3, vehicle_type_code_4, vehicle_type_code_5,
            contributing_factor_vehicle_3, contributing_factor_vehicle_4,
            contributing_factor_vehicle_5)) |>
  
  mutate(
    # add combined casualty column (injuries + fatalities)
    num_casualties = number_of_persons_killed + number_of_persons_injured,
    
    # add time of day categories
    time_day = case_when(
      hms(crash_time) > hm("5:00") & hms(crash_time) <= hm("12:00") ~
        "morning",
      hms(crash_time) > hm("12:00") & hms(crash_time) <= hm("17:00") ~
        "afternoon",
      hms(crash_time) > hm("17:00") & hms(crash_time) <= hm("21:00") ~
        "evening",
      hms(crash_time) > hm("21:00") | hms(crash_time) <= hm("5:00") ~
        "night"
    ) %>% 
      factor(levels = c("morning", "afternoon", "evening", "night")),
    
    # create binary variables for injury, fatality, and casualty
    has_injury = number_of_persons_injured > 0,
    has_fatality = number_of_persons_killed >0,
    has_casualty = has_injury | has_fatality,
    # add ordinal column, `severity`, for no casualties v. injuries v. fatalities
    severity = case_when(
      has_fatality ~ "fatal",
      has_injury ~ "injury",
      T ~ "no casualties"
    ),
    severity = factor(severity, levels = c("no casualties", "injury", "fatal")),
    
    # add Julian date column
    crash_date = as.Date(crash_date, format = "%m/%d/%Y"),
    crash_day = weekdays(crash_date, abbreviate = F),
    yday = yday(crash_date),
    
    # add column for weekend or weekday
    weekend_weekday = if_else(crash_day %in% c("Saturday", "Sunday"), 
                              "Weekend", "Weekday"),
    
    # make `crash_day` a factor rather than a character
    crash_day = as.factor(crash_day),
    
    # make `weekend_weekday` a factor rather than a character
    weekend_weekday = as.factor(weekend_weekday)

  )
```

```{r}
#| label: quick-eda
#| include: false
# Count the number of levels in vehicle_type_code_1
nlevels_vehicle_type_code_1 <- length(levels(factor(crashes$vehicle_type_code_1)))
cat("Number of levels in vehicle_type_code_1:", nlevels_vehicle_type_code_1, "\n")

# Count the number of levels in vehicle_type_code_2
nlevels_vehicle_type_code_2 <- length(levels(factor(crashes$vehicle_type_code_2)))
cat("Number of levels in vehicle_type_code_2:", nlevels_vehicle_type_code_2, "\n")

# Count the number of levels in contributing_factor_vehicle_1
nlevels_contributing_factor_vehicle_1 <- length(levels(factor(crashes$contributing_factor_vehicle_1)))
cat("Number of levels in contributing_factor_vehicle_1:", nlevels_contributing_factor_vehicle_1, "\n")

# Count the number of levels in contributing_factor_vehicle_2
nlevels_contributing_factor_vehicle_2 <- length(levels(factor(crashes$contributing_factor_vehicle_2)))
cat("Number of levels in contributing_factor_vehicle_2:", nlevels_contributing_factor_vehicle_2, "\n")

# combine unique levels from both vehicle_type_code variables
unique_levels_veh_type <- union(crashes$vehicle_type_code_1,
                                crashes$vehicle_type_code_2)

# count total number of unique levels in vehicle_type_code variables
num_unique_levels_veh_type <- length(unique_levels_veh_type)

# print
num_unique_levels_veh_type

# combine unique levels from both contributing_factor variables
unique_levels_cont_fact <- union(crashes$contributing_factor_vehicle_1,
                                 crashes$contributing_factor_vehicle_2)

# count total number of unique levels in contributing_factor variables
num_unique_levels_cont_fact <- length(unique_levels_cont_fact)

# print
num_unique_levels_cont_fact

# count number of MVCs without vehicle type 2 but with a contributing factor vehicle 2
crashes %>%
  filter(!is.na(contributing_factor_vehicle_2) & is.na(vehicle_type_code_2)) %>%
  count()

# count number of MVCs without data for vehicle type 1
crashes %>%
  filter(is.na(vehicle_type_code_1)) %>%
  count()

# count proportion of MVCs without data for vehicle type 1
(crashes %>%
  filter(is.na(vehicle_type_code_1)) %>%
  count())/(nrow(crashes))
```

Next, we cleaned the original variables corresponding to vehicle types, `vehicle_type_code_(1 or 2)`, involved in the accident as well as factors in each vehicle which may have contributed to the MVC, `contributing_factor_vehicle_(1 or 2)`. 453 MVCs contained an observation for `contributing_factor_vehicle_2` but were NA for `vehicle_type_code_2`, which we believe indicated not that there wasn't a second vehicle but that the vehicle type hadn't been recorded, so we replaced the `vehicle_type_code_2` NAs by indicating that it was simply unknown. Additionally, 59 MVCs had missing observations for `vehicle_type_code_1`, which we removed since each MVC must involve at least one vehicle and this represented only 0.638% of the dataset.

Our initial dataset had 121 unique levels for `vehicle_type_code_(1 or 2)`. In order to make these types interpretable for EDA and potentially in our model, we renamed the variables `vtype(1 or 2)` and consolidated them into 5 larger categories: "Passenger vehicles," "Commercial vehicles," "Motorcycles," "Non-Motor Vehicle," and "Other/Unknown" (also a category of "None", which only applies to `vtype2`).

The initial dataset also had 53 unique levels for `contributing_factor_vehicle_(1 or 2)`. In order to make these types interpretable for EDA and potentially in our model, we renamed the variables `factor(1 or 2)` and consolidated them into 5 larger categories: "Aggressive/Reckless Driving," "Failure to Obey Traffic Signs/Signals/Rules," "Impairment/Distraction/Fatigue," "Performance-unrelated Technical/Mechanical Factors," and "Other/Unknown."

```{r}
#| label: correct-vehicle-factor-categories
crashes <- crashes |>
  mutate(vehicle_type_code_2 = if_else(
    !is.na(contributing_factor_vehicle_2) & is.na(vehicle_type_code_2),
    "unk",
    vehicle_type_code_2
  ))

crashes <- crashes |> drop_na(vehicle_type_code_1)

ped_bike <- "Pedestrian/Bicyclist/Other Pedestrian Error/Confusion"
crashes <- crashes %>%
  mutate(across(starts_with("contributing_factor_vehicle"),
                ~ case_when(
                  . %in% c("Alcohol Involvement", "Drugs (Illegal)",
                           "Prescription Medication",
                           "Driver Inattention/Distraction","Fatigued/Drowsy",
                           "Lost Consciousness", "Other Electronic Device",
                           "Outside Car Distraction", "Passenger Distraction")
                           ~ "Impairment/Distraction/Fatigue",
                  . %in% c("Following Too Closely", "Passing Too Closely",
                           "Unsafe Lane Changing",
                           "Unsafe Speed",
                           "Backing Unsafely") ~ "Aggressive/Reckless Driving",
                  . %in% c("Failure to Yield Right-of-Way",
                           ped_bike,
                           "Reaction to Other Uninvolved Vehicle",
                           "Reaction to Uninvolved Vehicle",
                           "Turning Improperly")
                           ~ "Failure to Obey Traffic Signs/Signals/Rules",
                  . %in% c("Lane Marking Improper/Inadequate",
                           "Obstruction/Debris", "Other Vehicular",
                           "Oversized Vehicle", "Pavement Defective",
                           "Pavement Slippery",
                           "Traffic Control Device Improper/Non-Working",
                           "Traffic Control Disregarded",
                           "View Obstructed/Limited")
                           ~ "Performance-unrelated Technical/Mechanical Factors",
                  TRUE ~ "Other/Unknown"
                )
  )) |>
  rename(factor1 = contributing_factor_vehicle_1, 
         factor2 = contributing_factor_vehicle_2)

crashes <- crashes %>%
  mutate(across(starts_with("vehicle_type_code_1"),
                ~ case_when(
                  . %in% c("2 dr sedan", "3-Door", "4 dr sedan", "4dsd",
                        "Convertible", "Sedan", "SEDONA",
                        "Station Wagon/Sport Utility Vehicle",
                        "SPORT UTILITY / STATION WAGON", "LIMO",
                        "LIVERY VEHICLE") ~ "Passenger vehicles",
                  . %in% c("AMBU", "AMBUL", "Ambulance", "AMBULANCE",
                        "AMBULETTE", "Armored Truck", "Beverage Truck",
                        "Box Truck", "Bulk Agriculture", "Bus", "BUS",
                        "Carry All", "Chassis Cab", "DELIV", "DELV",
                        "Dump", "FDNY", "Fire", "FIRE TRUCK", "FIRETRUCK",
                        "Flat Bed", "Flat Rack", "Garbage or Refuse",
                        "Hopper", "SMALL COM VEH(4 TIRES)",
                        "LARGE COM VEH(6 OR MORE TIRES)",
                        "Mack Truck",
                        "PICK-UP TRUCK", "PK", "Refrigerated Van", "schoo",
                        "SCHOO", "Snow Plow", "Tow Truck",
                        "Tow Truck / Wrecker", "TRACT",
                        "Tractor Truck Diesel", "Tractor Truck Gasoline",
                        "TRAIL", "TRAILER", "TRALI", "TRUCK",
                        "USPS", "UTIL", "Van", "VAN",
                        "VAN TRUCK") ~ "Commercial vehicles",
                  . %in% c("MOTOR SCOO", "Motorcycle",
                        "MOTORCYCLE", "Motorscooter", "SCOOTER", "Moped") ~ 
                    "Motorcycles",
                  . %in% c("E-Bike", "BICYCLE", "Bike", "E-Scooter") ~ 
                    "Non-Motor Vehicle",
                  . %in% c("FORK", "unk", "UNKNOWN", "OTHER") ~ "Other/Unknown",
                  TRUE ~ "Other/Unknown"
          ))) |>
      rename(vtype1 = vehicle_type_code_1)

crashes <- crashes %>%
  mutate(across(starts_with("vehicle_type_code_2"),
                ~ case_when(
                  . %in% c("2 dr sedan", "3-Door", "4 dr sedan", "4dsd",
                        "Convertible", "Sedan", "SEDONA",
                        "Station Wagon/Sport Utility Vehicle",
                        "SPORT UTILITY / STATION WAGON", "LIMO",
                        "LIVERY VEHICLE") ~ "Passenger vehicles",
                  . %in% c("AMBU", "AMBUL", "Ambulance", "AMBULANCE",
                        "AMBULETTE", "Armored Truck", "Beverage Truck",
                        "Box Truck", "Bulk Agriculture", "Bus", "BUS",
                        "Carry All", "Chassis Cab", "DELIV", "DELV",
                        "Dump", "FDNY", "Fire", "FIRE TRUCK", "FIRETRUCK",
                        "Flat Bed", "Flat Rack", "Garbage or Refuse",
                        "Hopper", "SMALL COM VEH(4 TIRES)",
                        "LARGE COM VEH(6 OR MORE TIRES)",
                        "Mack Truck",
                        "PICK-UP TRUCK", "PK", "Refrigerated Van", "schoo",
                        "SCHOO", "Snow Plow", "Tow Truck",
                        "Tow Truck / Wrecker", "TRACT",
                        "Tractor Truck Diesel", "Tractor Truck Gasoline",
                        "TRAIL", "TRAILER", "TRALI", "TRUCK",
                        "USPS", "UTIL", "Van", "VAN",
                        "VAN TRUCK") ~ "Commercial vehicles",
                  . %in% c("MOTOR SCOO", "Motorcycle",
                        "MOTORCYCLE", "Motorscooter", "SCOOTER", "Moped") ~ 
                    "Motorcycles",
                  . %in% c("E-Bike", "BICYCLE", "Bike", "E-Scooter") ~ 
                    "Non-Motor Vehicle",
                  . %in% c("FORK", "unk", "UNKNOWN", "OTHER") ~ "Other/Unknown",
                  TRUE ~ "None"
          ))) |>
      rename(vtype2 = vehicle_type_code_2)

# make `factor1`, `factor2`, `vtype1`, and `vtype2` factors 
# rather than characters
crashes <- crashes %>%
  mutate(factor1 = as.factor(factor1),
         factor2 = as.factor(factor2),
         vtype1 = as.factor(vtype1),
         vtype2 = as.factor(vtype2))
```

## Exploratory Analysis

We can see from the visualizations below that vehicle type seems to have a significant impact on MVC casualty rate, particularly with regard to motorcycles and non-motor vehicles.

```{r}
#| label: viz-prop-casualties-by-vtype1-and-vtype2
#| fig-width: 7
# vtype1
crashes %>%
  filter(vtype1 != "Other/Unknown") %>%
  ggplot(aes(x = vtype1, fill = has_casualty)) +
  geom_bar(position = "fill", alpha = 0.5, color = "black") + 
  scale_fill_manual(values = c("lightgray", "red"), labels = c("No", "Yes")) +
  theme_classic() +
  labs(
    x = NULL, 
    y = "Casualty Rate", 
    fill = "Casualty", 
    title = "Motorcycles and non-motor vehicles have the highest casualty rate",
    subtitle = "Casualty rate of MVCs in New York by vehicle involved"
  )
```

The visualizations below do not seem to show any one driver related error or issue having a remarkable impact on casualty rates as compared to any others.

```{r}
#| label: viz-prop-casualties-by-factor1-and-factor
#| fig-width: 7
# factor1
crashes %>%
  filter(factor1 != "Other/Unknown") %>%
  ggplot(aes(x = factor1, fill = has_casualty)) +
  geom_bar(position = "fill", color = "black", alpha = 0.5) + 
  scale_fill_manual(values = c("lightgray", "red"), labels = c("No", "Yes")) +
  scale_x_discrete(
    labels = c("Aggressive Driving", "Traffic Violations", 
               "Impairment/Distraction", "Technical Failure")) +
  theme_classic() +
  labs(
    x = NULL, 
    y = "Casualty Rate", 
    fill = "Casualty", 
    title = "No contributing factor is disproportionally casualty-prone", 
    subtitle = "MVCs with casualties based on cause of accident"
  )
```

To explore how timing might effect the occurrence of casualties, we explored the relationship between day of the week and casualty occurrence, finding that weekend MVC casualties were more heavily concentrated in the early morning hours than weekday MVC casualties. This was interesting as it provided some credence to the intuitive thought that early morning weekend drivers are more likely than early morning weekday drivers to be leaving parties/going out, therefore making them more likely to be impaired and get into a serious MVC. Additionally, the proportion of early morning (12 AM to 4 AM) weekend drivers with "Impairment/Distraction/Fatigue" listed as a factor was 0.2685617, fairly different from that of early morning weekday drivers, 0.1746032.

```{r}
#| label: calculate-prop-of-weekend-weekday-earlymorn-intoxicated

# weekday prop
(crashes %>%
  filter(weekend_weekday == "Weekday" & crash_time %in% c(00:00, 04:00) & factor1 == "Impairment/Distraction/Fatigue") %>%
  count())/(crashes %>%
  filter(weekend_weekday == "Weekday" & crash_time %in% c(00:00, 04:00)) %>%
  count())
```

```{r}
#| label: viz-time-density-with-weekend_weekday
#| fig-width: 7
crashes |>
  filter(num_casualties > 0) |>
  mutate(color = if_else(weekend_weekday == "Weekend", 
         "red", "gray")) |>
  ggplot(aes(x = crash_time, group = weekend_weekday)) +
  geom_density(color = "lightgray") +
  geom_density(
    data = filter(crashes, num_casualties > 0, 
                  weekend_weekday == "Weekend"), 
    color = "red"
  ) +
  geom_vline(xintercept = hm("9:00"), linetype = 3) +
  geom_vline(xintercept = hm("17:00"), linetype = 3) +
  annotate("text", label = "9:00 am", color = "gray", angle = 90,
           x = hm("10:00"), y = 5e-06, hjust = "right", vjust = "bottom") +
  annotate("text", label = "5:00 pm", color = "gray", angle = 90,
           x = hm("16:30"), y = 5e-06, hjust = "right", vjust = "bottom") +
  annotate("text", color = "red", label = "Weekend", x = hm("00:20"), 
           hjust = "left", fontface = "bold", y = 8e-06) +
  annotate("text", color = "gray", label = "Weekday", x = hm("00:20"), 
           hjust = "left", fontface = "bold", y = 1e-06) +
  scale_color_identity() +
  theme_classic() +
  labs(
    x = "Time of crash",
    y = "Density",
    title = "Weekend casualties are disproportionately in the early morning",
    subtitle = paste("Time density of NYC car accidents with injuries or",
                     "fatalities by Weekend or Weekday"),
    color = "Weekend or Weekday"
  )
```

We also visualized densities of casualty occurrence and non-occurrence by numerical day of the year. We observed proportional casualty density to be lower in the colder winter months, and higher in the summer and fall.

```{r}
#| label: viz-density-severity-day-of-year
#| fig-width: 7
#| fig-height: 2.8
crashes |>
  ggplot(aes(x = yday)) +
  geom_density(data = filter(crashes, severity == "no casualties"), 
               aes(group = severity), color = "lightgray") +
  geom_density(data = filter(crashes, severity == "injury"), color = "red") +
  annotate("text", color = "red", label = "Casualties", x = 27, y = 0.0019,
           fontface = "bold", hjust = "left") +
  annotate("text", color = "gray", label = "No casualties", x = 5, 
           y = 0.0029, fontface = "bold", hjust = "left") +
  theme_classic() +
  labs(
    x = "Day of the year",
    y = "Density",
    title = "Colder months have lower vehicular casualty proportion",
    subtitle = "NYC car accident density over all years by level of severity"
  )
```

Further analysis was done to explore whether zip code seemed to impact casualty rates (**Appendix 2a**), but this only revealed that these rates were approximately normally distributed. We also visualized MVC count by borough (**Appendix 2b**), seeing no significant trend other than high missingness for `borough` data.

# Methodology

We intend to explore the factors related to timing and characteristics of drivers which might contribute to casualties in MVCs. Our outcome variable of interest, `has_casualty`, is a binary variable, thus the logical option in our case is to fit a logistic regression model to investigate our primary research concern.

We anticipate that the vehicle type involved in the MVC will play a significant role in whether or not a MVC has casualties, particularly in the context of the visualizations from our EDA. We will absolutely want to include the types of the vehicles involved in the crash, `vtype1` and `vtype2`, due to EDA as well as the intuitive fact that MVCs involving vehicles which leave a driver more exposed are far more likely to leave the driver with a casualty.

EDA showed less significant differences in casualty frequency between types of contributing factors to an accident (`factor1` and `factor2`) than it did between types of vehicles. Although we might expect that different contributing factors might contribute differently to accident severity (e.g., we would expect that driving drunk would be more likely to cause an accident with casualties than if someone fails to come to a complete stop at a stop sign), we are not completely sure that these factors will be useful in the fit of our model. Therefore, `factor1` and `factor2` will be \*considered\* in our model selection process, and we will treat them as a "package deal," since it stands to reason that if one of the vehicle factors is useful, it would be inappropriate to omit the other

We are very interested in the time status of MVCs and how that may affect casualty likelihood, including time of day (`time_day`), weekend or weekday (`weekend_weekday`), and numerical day of the year (`yday`). In our EDA, we saw that the density of MVCs with casualties over the course of a day varied based on `weekend_weekday`, and also observed a change in relative densities of MVCs with and without accidents according to `yday`. Therefore, we will include `time_day`, `weekend_weekday`, and `yday` in our model. As we observed that weekend MVC casualties were more heavily concentrated in the early morning hours than weekday MVC casualties, we will also *consider* an interaction term between `weekend_weekday` and `time_day`, `weekend_weekday*time_day`.

We hoped to include `borough` as a predictor but could not due to high missingness. We also considered using `zip_code`, but this variable had over 100 unique levels and the proportion of accidents with casualties by zip code is approximately normally distributed around a median of 1.191, so we would not expect this to be a useful predictor.

We constructed and compared 3 models using a likelihood ratio test at the $\alpha$ = 0.05 significance level to select our final model, each with `has_casualty` as the response variable. Predictors in `model_1` (the base model) are `vtype1`, `vtype2`, `time_day`, `weekend_weekday`, and `yday`, `model_2` adds `factor1` and `factor2`, and `model_3` adds `weekend_weekday*time_day` to `model_2`.

Based on our likelihood ratio test (**Appendix 3a**), `model_2` fits our data better than model 1, while the difference between `model_2` and `model_3` is insignificant. We move forward with `model_2` (as it has fewer predictors than `model_3`) and test if it satisfies assumptions of independence and linearity.

We will consider the assumption of independence between observations to be upheld because regardless of the number of vehicles involved, each accident receives only a single observation in the dataset. That removes the possibility that multiple rows correspond to the same accident and, thereby, the same accident conditions. If numerous reports of the same accident occur, there is still only one report made, so it is reasonable to assume that each observation is independent of the others, regardless of how many people reported it or how many cars were involved. From the plot showing `yday` compared to the predicted log odds of MVC casualty (**Appendix 3b**), there appears to be a fairly strong linear relationship between the two, so the linearity assumption for `model_2` does seem to be reasonable. Thus, we will proceed with `model_2` as our final model.

# Results

## Instructions:

This is where you will output the final model with any relevant model fit statistics. Describe the key results from the model. The goal is not to interpret every single variable in the model but rather to show that you are proficient in using the model output to address the research questions, using the interpretations to support your conclusions. Focus on the variables that help you answer the research question and that provide relevant context for the reader.

### Grading Criteria

The model fit is clearly assessed, and interesting findings from the model are clearly described. Interpretations of model coefficients are used to support the key findings and conclusions, rather than merely listing the interpretation of every model coefficient. If the primary modeling objective is prediction, the model's predictive power is thoroughly assessed.

## What we have
```{r}
#| label: final model output
# model 2: final model
finalmodel <- glm(has_casualty ~ vtype1 + vtype2 + time_day + weekend_weekday +
                 yday + factor1 + factor2, 
              data = crashes, family = "binomial")
# print final model
print(tidy(finalmodel), n = 50)

model_2_aug <- augment(model_2) |>
  mutate(prob = exp(.fitted)/(1+exp(.fitted)))
```

# Discussion

## Instructions:

In this section you'll include a summary of what you have learned about your research question along with statistical arguments supporting your conclusions. In addition, discuss the limitations of your analysis and provide suggestions on ways the analysis could be improved. Any potential issues pertaining to the reliability and validity of your data and appropriateness of the statistical analysis should also be discussed here. Lastly, this section will include ideas for future work.

### Grading criteria

Overall conclusions from analysis are clearly described, and the model results are put into the larger context of the subject matter and original research question. There is thoughtful consideration of potential limitations of the data and/or analysis, and ideas for future work are clearly described.

## What we have

{{< pagebreak >}}

# Appendix

## 1. Data Cleaning

#### a) Sample code for sampling/exportation of large original dataset

    crashes_original <- read_csv(<filename>)
    crashes <- sample_n(crashes_original, 10000)
    write_csv(crashes, <"crashes">)

## 2. Exploratory Data Analysis

#### a) Visualization of Casualty Rates by Zip Code

```{r}
#| label: viz-zip-code-box
#| fig-height: 2
#| fig-width: 7
zip_crash <- crashes |>
  group_by(zip_code) |>
  summarise(count = n(), casualties = sum(has_casualty)) |>
  mutate(prop = casualties / count)

zip_med <- median(zip_crash$prop)

zip_crash |>
  ggplot(aes(x = prop)) +
  geom_vline(xintercept = zip_med, linetype = 3) +
  annotate("text", label = "Median = 0.186", x = 0.2, y = 0.8, color = "gray",
           fontface = "bold", hjust = "left") +
  geom_boxplot(varwidth = T, fill = "red", alpha = 0.5) +
  ylim(-1,1) +
  labs(
    x = "Proportion of accidents with casualties",
    y = NULL,
    title = "Zip Code casualty rates are approximately normal",
    subtitle = "Distribution of NYC car accident casualty rates by zip code"
  ) +
  theme_classic() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.line.y = element_blank()
  )
```

#### b) Visualization of MVC by Borough

```{r}
#| label: viz-hist-by-street
#| fig-width: 7
crashes |>
  group_by(borough) |>
  summarise(count = n()) |>
  mutate(color = if_else(is.na(borough), "red", "lightgray")) |>
  ggplot(aes(x = borough, y = count, fill = color)) +
  geom_col(alpha = 0.5, color = "black") +
  scale_fill_identity() +
  theme_classic() +
  labs(
    x = NULL,
    y = "Count",
    title = "\"Missing\" is the biggest borough in NYC",
    subtitle = paste("Missingness of borough variable is too great to include",
                     "in the model")
  )
```

## 3. Methodology

#### a) Likelihood-ratio test between models considered


```{r}
#| label: build-models and likelihood ratio test
# model 1: base model
model_1 <- glm(has_casualty ~ vtype1 + vtype2 + time_day +
                    weekend_weekday + yday, 
              data = crashes, family = "binomial")

# model 2: add `factor1` and `factor2`
model_2 <- glm(has_casualty ~ vtype1 + vtype2 + time_day + weekend_weekday +
                 yday + factor1 + factor2, 
              data = crashes, family = "binomial")

# model 3: add `weekend_weekday*time_day`
model_3 <- glm(has_casualty ~ vtype1 + vtype2 + time_day + weekend_weekday +
                 yday + factor1 + factor2 + weekend_weekday*time_day, 
              data = crashes, family = "binomial")
# Perform likelihood ratio test
anova(model_1, model_2, model_3, test = "Chisq")

```

#### b) Numerical Day of the Year vs. Log-odds of Casualty Plot

```{r}
#| label: emplogit
emplogitplot1(has_casualty ~ (yday), data = crashes, ngroups = "all")
```

## 4. Results

#### a) ROC Assessment

```{r}
#| label: roc-auc
model_2_aug <- augment(model_2) |>
  mutate(prob = exp(.fitted)/1+exp(.fitted),
         pred_leg = if_else(prob > 0.5, T, F))

model_2_aug |>
  roc_auc(
    truth = as.factor(has_casualty),
    prob,
    event_level = "second"
  )
```

{{< pagebreak >}} 

# 5. Works Cited 
Department of Health. All Injuries in New York State. (n.d.). Retrieved May 4, 2023, from https://www.health.ny.gov/statistics/prevention/injury_prevention/all_injury.htm
