---
title: "Sta 210 Final Project"
subtitle: "Drew LoPolito and Mitch Harrison"
format: pdf
execute: 
  warning: false
  execute: false
---

# Introduction

## Dataset

Our dataset is composed of harvested and compiled data from New York City Police Department (NYPD) open access data on all police reported motor vehicle collisions (MVC) in all five boroughs of New York City from July 1st, 2012 through April 24th, 2023. The police report from which individual MVC observations in our dataset hail (MV104-AN) is required to be filled out for MVC where someone is injured or killed, or which result in at least $1,000 of total property damage. Notably, only one MV104-AN form is filled out for all involved in an accident, meaning each observation in our dataset represents a unique MVC.

Our initial dataset contained approximately 1.9 million observations (it can be found at https://www.kaggle.com/datasets/utkarshx27/motor-vehicle-collisions?resource=download). This was too large to import and examine in R, so we sampled 10,000 observations from the dataset completely at random (code shown in Methods). The original dataset, as well as our randomly sampled dataset, contained data on crashes involving 1 to 5 motorists, however, 93% of crashes in the dataset occurred between 2 or fewer motorists (98% between 3 or fewer and 100% between 4 or fewer). Due to high levels of missingness in crashes with 3 or more motorists, as well as their low real-world frequency in New York City (where the kind of highway pile-ups which generate MVC with 3 or more motorists aren’t generally observed), we decided to examine exclusively MVC between 2 or fewer motorists, which brought our total number of observations down to approximately 9,300.

We created a number of new variables by manipulating the dataset, as well as recategorizing/cleaning some of the existing variables for practical use in modeling (for example, the original variables for factors contributing to the accident for each motorist and vehicle type of each motorist contained roughly 100 categories).

The following are the variables of interest from our dataset, with new or recategorized variables noted:

`crash_date`: the date on which the MVC occurred.

`crash_day`: a categorical variable corresponding to the day of the week on which the MVC occurred, generated from the original `crash_date` variable.

`yday`: a numeric variable ranging from 1 to 365 corresponding to the numerical day of the year on which the MVC occurred.

`crash_time` the time (in 24-hr time) at which the MVC occurred.

`time_day`: a categorical variable with levels of “morning,” “afternoon,” “evening,” and “night” corresponding to the time of day at which a MVC occurred. This variable was generated from the `crash_time` variable, with “morning” from 5 AM to 12 PM, “afternoon” from 12 PM to 5 PM, “evening” from 5 PM to 9 PM, and “night” from 9 PM to 5 AM.

`num_casualties`: a numeric variable corresponding to the number of casualties, i.e., injuries or fatalities, resulting from an MVC. This was generated from the original `number_of_persons_injured` and `number_of_persons_killed` variables.

`has_casualty`: a binary variable corresponding to whether or not a MVC resulted in at least one casualty.

`vtype1` and `vtype2`: categorical variables corresponding to the types of each vehicle (if applicable) involved in the crash, with categories of “Commercial vehicles,” “Passenger vehicles,” “Motorcycles,” “Non-Motor Vehicle,” and “Other/Unknown.”

`factor1` and `factor2`: categorical variables corresponding any notable factors which were listed as potentially contributing to the crash (if applicable), with categories of “Aggressive/Reckless Driving,” “Distraction/Inattention/Fatigue,” “Failure to Obey Traffic Signs/Signals/Rules,” “Impaired,” “Other Technical/Mechanical Factors,” and “Other/Unknown.”

Our primary research question of interest is whether an accident having casualties or not depends on the type(s) of 


# Read Data/Libraries

```{r}
#| label: import-libs
library(tidyverse)
library(tidymodels)
library(lubridate)
```

```{r}
#| label: read-data
crashes <- read_csv("data/crashes_10k.csv")
```

# Methodology

-   MCAR
-   2 or fewer vehicles only
-   response: person casualty (injured + killed)
-   removed rows with \>2 vehicles
-   add column to track whether or not there are injuries/fatalities 5:12 12:5 5:9 9:5

# Data Wrangling

```{r}
#| label: clean-data
crashes <- crashes |>
  # remove accidents involving greater than 2 vehicles
  filter(is.na(contributing_factor_vehicle_3), is.na(vehicle_type_code_3)) |>
  
  select(!c(vehicle_type_code_3, vehicle_type_code_4, vehicle_type_code_5,
            contributing_factor_vehicle_3, contributing_factor_vehicle_4,
            contributing_factor_vehicle_5)) |>
  
  mutate(
    # add combined casualty column (injuries + fatalities)
    num_casualties = number_of_persons_killed + number_of_persons_injured,
    
    # create factors
    contributing_factor_vehicle_1 = as.factor(contributing_factor_vehicle_1),
    contributing_factor_vehicle_2 = as.factor(contributing_factor_vehicle_2),
    vehicle_type_code_1 = as.factor(vehicle_type_code_1),
    vehicle_type_code_2 = as.factor(vehicle_type_code_2),
    zip_code = as.factor(zip_code),
    borough = as.factor(borough),
    
    # add time of day categories
    time_day = case_when(
      hms(crash_time) > hm("5:00") & hms(crash_time) <= hm("12:00") ~
        "morning",
      hms(crash_time) > hm("12:00") & hms(crash_time) <= hm("17:00") ~
        "afternoon",
      hms(crash_time) > hm("17:00") & hms(crash_time) <= hm("21:00") ~
        "evening",
      hms(crash_time) > hm("21:00") | hms(crash_time) <= hm("5:00") ~
        "night"
    ) %>% 
      factor(levels = c("morning", "afternoon", "evening", "night")),
    
    # add ordinal column for injuries v. fatalities
    has_injury = number_of_persons_injured > 0,
    has_fatality = number_of_persons_killed >0,
    has_casualty = has_injury | has_fatality,
    severity = case_when(
      has_fatality ~ "fatal",
      has_injury ~ "injury",
      T ~ "no casualties"
    ),
    severity = factor(severity, levels = c("no casualties", "injury", "fatal")),
    
    # add Julian date column
    crash_date = as.Date(crash_date, format = "%m/%d/%Y"),
    crash_day = weekdays(crash_date, abbreviate = F),
    yday = yday(crash_date)
  )

    # make `crash_day` a factor rather than a character
    crashes <- crashes %>%
      mutate(crash_day = as.factor(crash_day))
```

```{r}
#| label: correct-vehicle-factor-categories
ped_bike <- "Pedestrian/Bicyclist/Other Pedestrian Error/Confusion"
crashes <- crashes %>%
  mutate(across(starts_with("contributing_factor_vehicle"),
                ~ case_when(
                  . %in% c("Alcohol Involvement", "Drugs (Illegal)",
                           "Prescription Medication") ~ "Impaired",
                  . %in% c("Driver Inattention/Distraction", "Fatigued/Drowsy",
                           "Lost Consciousness", "Other Electronic Device",
                           "Outside Car Distraction", "Passenger Distraction")
                           ~ "Distraction/Inattention/Fatigue",
                  . %in% c("Following Too Closely", "Passing Too Closely",
                           "Unsafe Lane Changing",
                           "Unsafe Speed",
                           "Backing Unsafely") ~ "Aggressive/Reckless Driving",
                  . %in% c("Failure to Yield Right-of-Way",
                           ped_bike,
                           "Reaction to Other Uninvolved Vehicle",
                           "Reaction to Uninvolved Vehicle",
                           "Turning Improperly")
                           ~ "Failure to Obey Traffic Signs/Signals/Rules",
                  . %in% c("Lane Marking Improper/Inadequate",
                           "Obstruction/Debris", "Other Vehicular",
                           "Oversized Vehicle", "Pavement Defective",
                           "Pavement Slippery",
                           "Traffic Control Device Improper/Non-Working",
                           "Traffic Control Disregarded",
                           "View Obstructed/Limited")
                           ~ "Other Technical/Mechanical Factors",
                  TRUE ~ "Other/Unknown"
                )
  )) |>
  rename(factor1 = contributing_factor_vehicle_1, 
         factor2 = contributing_factor_vehicle_2)

crashes <- crashes %>%
  mutate(across(starts_with("vehicle_type_code"),
                ~ case_when(
                  . %in% c("2 dr sedan", "3-Door", "4 dr sedan", "4dsd",
                        "Convertible", "Sedan", "SEDONA",
                        "Station Wagon/Sport Utility Vehicle",
                        "SPORT UTILITY / STATION WAGON", "LIMO",
                        "LIVERY VEHICLE") ~ "Passenger vehicles",
                  . %in% c("AMBU", "AMBUL", "Ambulance", "AMBULANCE",
                        "AMBULETTE", "Armored Truck", "Beverage Truck",
                        "Box Truck", "Bulk Agriculture", "Bus", "BUS",
                        "Carry All", "Chassis Cab", "DELIV", "DELV",
                        "Dump", "FDNY", "Fire", "FIRE TRUCK", "FIRETRUCK",
                        "Flat Bed", "Flat Rack", "Garbage or Refuse",
                        "Hopper", "SMALL COM VEH(4 TIRES)",
                        "LARGE COM VEH(6 OR MORE TIRES)",
                        "Mack Truck",
                        "PICK-UP TRUCK", "PK", "Refrigerated Van", "schoo",
                        "SCHOO", "Snow Plow", "Tow Truck",
                        "Tow Truck / Wrecker", "TRACT",
                        "Tractor Truck Diesel", "Tractor Truck Gasoline",
                        "TRAIL", "TRAILER", "TRALI", "TRUCK",
                        "USPS", "UTIL", "Van", "VAN",
                        "VAN TRUCK") ~ "Commercial vehicles",
                  . %in% c("MOTOR SCOO", "Motorcycle",
                        "MOTORCYCLE", "Motorscooter", "SCOOTER", "Moped") ~ 
                    "Motorcycles",
                  . %in% c("E-Bike", "BICYCLE", "Bike", "E-Scooter") ~ 
                    "Non-Motor Vehicle",
                  . %in% c("FORK", "unk", "UNKNOWN", "OTHER") ~ "Other/Unknown",
                  TRUE ~ "Other/Unknown"
          ))) |>
      rename(vtype1 = vehicle_type_code_1, vtype2 = vehicle_type_code_2)

# make `factor1`, `factor2`, `vtype1`, and `vtype2`, factors rather than a characters
    crashes <- crashes %>%
      mutate(factor1 = as.factor(factor1),
             factor2 = as.factor(factor2),
             vtype1 = as.factor(vtype1),
             vtype2 = as.factor(vtype2))

view(crashes)

```

```{r}
#| label: examine-data
class(crashes$contributing_factor_vehicle_1)

levels(crashes$contributing_factor_vehicle_1)

levels(crashes$contributing_factor_vehicle_2)

crashes %>%
  filter(is.na(borough)) %>%
  count()

crashes %>%
  filter(is.na(borough)) %>%
  filter(!is.na(latitude)) %>%
  count()

crashes %>%
  filter(number_of_persons_killed != 0) %>%
  count()

crashes %>%
  filter(num_casualties > 1) %>%
  count()

crashes %>%
  filter(num_casualties > 2) %>%
  count()

crashes %>%
  filter(num_casualties > 3) %>%
  count()

crashes %>%
  filter(num_casualties > 4) %>%
  count()

crashes %>%
  filter(num_casualties > 5) %>%
  count()

crashes %>%
  filter(num_casualties > 6) %>%
  count()
```

# Exploratory Analysis

## Time of Day

```{r}
#| label: viz-time-density
crashes |>
  filter(num_casualties > 0) |>
  mutate(color = if_else(crash_day == "Sunday" | crash_day == "Saturday", 
         "red", "gray")) |>
  ggplot(aes(x = crash_time, group = crash_day)) +
  geom_density(color = "lightgray") +
  geom_density(
    data = filter(crashes, num_casualties > 0, 
                  crash_day == "Sunday" | crash_day == "Saturday"), 
    color = "red"
  ) +
  geom_vline(xintercept = hm("9:00"), linetype = 3) +
  geom_vline(xintercept = hm("17:00"), linetype = 3) +
  annotate("text", label = "9:00 am", color = "gray", angle = 90,
           x = hm("10:00"), y = 5e-06, hjust = "right", vjust = "bottom") +
  annotate("text", label = "5:00 pm", color = "gray", angle = 90,
           x = hm("16:30"), y = 5e-06, hjust = "right", vjust = "bottom") +
  annotate("text", color = "red", label = "Weekend", x = hm("00:20"), 
           hjust = "left", fontface = "bold", y = 8e-06) +
  annotate("text", color = "gray", label = "Mon. - Fri.", x = hm("00:20"), 
           hjust = "left", fontface = "bold", y = 1e-06) +
  scale_color_identity() +
  theme_classic() +
  labs(
    x = "Time of crash",
    y = "Density",
    title = "Weekend casualties are disproportionately in the early morning",
    subtitle = paste("Time density of NYC car accidents with injuries or",
                     "fatalities by day of week"),
    color = "Weekday"
  )
```

Of accidents with one or more casualties, those happening on Saturdays and Sundays appear to occur disproportionately late at night and with a notably smaller peak around 5:00 pm. While there is variance around the weekend, the general pattern stays the same between all seven days. To account for this, we will introduce a random effect based on the days of the week to allow information sharing between them. We anticipate that our model's performance will benefit from such a change, and this random effect will end up in the final model after performance evaluation.

## Day of the year

```{r}
#| label: viz-density-severity-day-of-year
crashes |>
  ggplot(aes(x = yday)) +
  geom_density(data = filter(crashes, severity == "no casualties"), 
               aes(group = severity), color = "lightgray") +
  geom_density(data = filter(crashes, severity == "injury"), color = "red") +
  annotate("text", color = "red", label = "Casualties", x = 27, y = 0.0019,
           fontface = "bold", hjust = "left") +
  annotate("text", color = "gray", label = "No casualties", x = 5, 
           y = 0.0029, fontface = "bold", hjust = "left") +
  theme_classic() +
  labs(
    x = "Day of the year",
    y = "Density",
    title = "Colder months have lower vehicular casualty proportion",
    subtitle = "NYC car accident density over all years by level of severity"
  )
```

The variance in density between levels of severity of accidents through all years is relatively low. However, we see disproportionately severe accidents around the late summer/early spring months and minor accidents in the early winter months. We will include the day of the year in our initial model, but it may get cut during model evaluation.

## Borough

```{r}
#| label: viz-hist-by-street
crashes |>
  group_by(borough) |>
  summarise(count = n()) |>
  mutate(color = if_else(is.na(borough), "red", "lightgray")) |>
  ggplot(aes(x = borough, y = count, fill = color)) +
  geom_col() +
  scale_fill_identity() +
  theme_classic() +
  labs(
    x = NULL,
    y = "Count",
    title = "\"Missing\" is the biggest borough in NYC",
    subtitle = paste("Missingness of borough variable is too great to include",
                     "in the model")
  )
```

We have far too many missing values to include borough in our model. If we could verify that borough was Missing Completely At Random (MCAR), we could include it in our complete-case model. Still, unfortunately, we are unable to verify the missingness mechanism and are therefore uncomfortable with possible performance impacts by using borough in our final model.

# Model Construction

```{r}
#| label: model-initial
model1 <- glm(has_casualty ~ yday + time_day + factor1 + factor2 +
                vtype1 + vtype2, 
              data = crashes, family = "binomial")
print(tidy(model1), n = 23)
```

# Results

# Discussion


